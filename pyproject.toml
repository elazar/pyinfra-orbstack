[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pyinfra-orbstack"
dynamic = ["version"]
description = "PyInfra connector for OrbStack VM and container management"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Matthew Turland", email = "me@matthewturland.com"},
]
maintainers = [
    {name = "Matthew Turland", email = "me@matthewturland.com"},
]
keywords = ["pyinfra", "orbstack", "vm", "container", "automation", "infrastructure"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
requires-python = ">=3.9"
dependencies = [
    "pyinfra>=3.2",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "build>=1.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "pytest-cov>=4.0.0",
    "pytest>=7.0.0",
    "twine>=4.0.0",
]

[dependency-groups]
dev = [
    "black>=23.0.0",
    "build>=1.0.0",
    "flake8>=6.0.0",
    "hatch-vcs>=0.5.0",
    "hatchling>=1.27.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=4.0.0",
    "pytest-instafail>=0.5.0",
    "pytest-monitor>=1.6.6",
    "pytest-progress>=1.3.0",
    "pytest-timeout>=2.4.0",
    "pytest-timer>=1.0.0",
    "pytest-xdist>=3.8.0",
    "pytest>=7.0.0",
    "twine>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/elazar/pyinfra-orbstack"
Documentation = "https://github.com/elazar/pyinfra-orbstack#readme"
Repository = "https://github.com/elazar/pyinfra-orbstack"
Issues = "https://github.com/elazar/pyinfra-orbstack/issues"
Changelog = "https://github.com/elazar/pyinfra-orbstack/blob/main/CHANGELOG.md"

[project.entry-points."pyinfra.connectors"]
orbstack = "pyinfra_orbstack.connector:OrbStackConnector"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/pyinfra_orbstack/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/pyinfra_orbstack"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
# E203: Black disagrees with PEP 8 on whitespace before ':'
# W503: Black disagrees with PEP 8 on line break before binary operator
# E501: Black handles line length at 88 characters
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg",
    ".venv",
    ".mypy_cache",
    ".tox",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# PyInfra does not natively support comprehensive type hints (as of Oct 2025).
# The @operation() decorator transforms functions in ways that make them appear
# untyped and changes call signatures in ways mypy cannot understand.
# TODO: Monitor https://github.com/Fizzadar/pyinfra for typing improvements
[[tool.mypy.overrides]]
module = "pyinfra_orbstack.operations.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
# Disable checks that fail due to decorator transformation
disable_error_code = ["misc", "call-arg", "arg-type"]

[tool.coverage.run]
source = ["src/pyinfra_orbstack"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",

    # Exclude PyInfra @operation() decorator and wrapped code
    # The decorator transforms these in ways coverage.py cannot track
    "@operation\\(\\)",
    "yield from ",
    "yield build_",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/pyinfra_orbstack",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--durations=10",  # Show 10 slowest tests at end
    "--timer-top-n=10",  # Show top 10 tests with timing percentages
    "--instafail",  # Show failures and errors instantly
    "-v",  # Verbose output to see each test as it runs
    "--show-progress",  # Show progress bar
    "--timeout=180",  # 3 minute timeout per test (based on baseline metrics)
]
markers = [
    "integration: mark test as integration test requiring OrbStack",
    "unit: mark test as unit test (can run without OrbStack)",
    "slow: mark test as slow running",
    "e2e: mark test as end-to-end test",
    "expensive: mark tests that create VMs (use -m 'not expensive' to skip)",
]
